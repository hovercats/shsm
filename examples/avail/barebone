#!/bin/sh

# this script just houses some info and examples on how to write a
# service script for svc

# first, you can set bin name or path to bin if you wish to use this variable
# (optional)
#BIN="/usr/bin/$example"
#BIN="example"

# if you for whatever reason rather use a for loop instead of the above, you can
# use something in the lines of the example below (still optional)
# set SERVICE variable for below
#SERVICE="$example"
#BIN=""
#for p in /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin;
#do
	#if [ -x "$p/$SERVICE" ];
	#then
		#BIN="$p/$SERVICE"
		#break
	#fi
#done
#[ -z "$BIN" ] && exit 1

# if you want to figure out the PID(s) of the service for later you can use 
# pidof.
# note: pidof is not posix.
# (this is optional aswell)
# PID=$(pidof -o %PPID "$BIN")

# for a posix way to do the above:
killservice() {
  # this will eventually get improved upon, but it does work on my end anyway.
  ps > out
  PID="$(grep $BIN out | awk '{print $1}')"
  kill -9 $PID

  # if a service has multiple PID's, use a for loop, like this:
  for n in $PID; do
    kill -9 $n
  done
  
  # delete this, as we no longer need it
  rm -rf out
}

# here is the commands that svc will run to start/stop services
# this is more or less mandatory, if you wish to be able to start/stop the service
case $1 in
	-s)
    # this may not always work, depending on the bin
		[ -z "$PID" ] && $BIN;
    # a simple exec command instead might work better
    # example:
    # exec iwd -d
		;;
	-k)
    # simlarly to above, this might not always work
		[ -n "$PID" ] && kill -9 "$PID" > /dev/null 2>&1;
    # a simple pkill command will kill the service + any other related PIDs
    # pkill is not posix however.
    # example:
    # pkill iwd

    # or use the above function, which is posix
    killservice
		;;
	*)
		echo "usage: $0 -s|-k"
		exit 1
esac
